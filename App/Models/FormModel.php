<?php

namespace App\Models;

class FormModel
{
    private $dbHost = 'localhost';
    private $dbUsername = 'root';
    private $dbPassword = 'root';
    private $dbName = 'test_db';

    private $db;

    public function __construct()
    {
        $this->connectToDb();
    }

    // PDO as SQL-injection protection
    private function connectToDb()
    {
        $dsn = "mysql:host={$this->dbHost};dbname={$this->dbName};charset=utf8mb4";

        try {
            $this->db = new \PDO($dsn, $this->dbUsername, $this->dbPassword);
            // Set PDO error mode to throw a PDOException for improved error handling
            $this->db->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
        } catch (\PDOException $e) {
            echo 'Database connection failed: ' . $e->getMessage();
        }
    }

    private function getDataFromDb($id)
    {
        $statement = $this->db->prepare('SELECT data FROM test_form_table WHERE id = :id');
        $statement->bindParam(':id', $id);
        $statement->execute();

        $result = $statement->fetch(\PDO::FETCH_ASSOC);

        if ($result === false) {
            return null;
        }

        return htmlspecialchars_decode($result['data']);
    }

    // Unique id is generated by the DB (unique index and auto increment)
    // TODO: handle the race condition problem
    public function saveData($data)
    {
        $data = $this->sanitizeData($data);

        $statement = $this->db->prepare('INSERT INTO test_form_table (data) VALUES (:data)');
        $statement->bindParam(':data', $data);
        $statement->execute();

        $id = $this->db->lastInsertId();

        return $id;
    }

    public function getData($id)
    {
        return $this->getDataFromDb($id);
    }

    // XSS protection
    private function sanitizeData($data)
    {
        return htmlspecialchars($data, ENT_QUOTES, 'UTF-8');
    }

    public function generateCSRFToken()
    {
        return bin2hex(random_bytes(32));
    }
}